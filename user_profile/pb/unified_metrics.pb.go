// Code generated by protoc-gen-go. DO NOT EDIT.
// source: unified_metrics.proto

/*
Package userprofile is a generated protocol buffer package.

It is generated from these files:
	unified_metrics.proto

It has these top-level messages:
	UnifiedMetric
	EntityPrefMetric
	AccessMetric
	ItemPrefMetric
	CollectionPrefMetric
	UPIPrefMetric
	CUnifiedMetric
	Featurewise
	CFeaturewise
	TabAccess
	TabAccessNS
	EntityPref
	EntityPrefs
	UPIPref
	UPIPrefs
	ItemPrefs
	CollectionPrefs
*/
package userprofile

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Enums
// Renamed FollowStatusEnum: EntityPrefStatusEnum
type EntityPrefStatusEnum int32

const (
	EntityPrefStatusEnum_UNKNOWN        EntityPrefStatusEnum = 0
	EntityPrefStatusEnum_FOLLOWED       EntityPrefStatusEnum = 1
	EntityPrefStatusEnum_UNFOLLOWED     EntityPrefStatusEnum = 2
	EntityPrefStatusEnum_BLOCKED        EntityPrefStatusEnum = 3
	EntityPrefStatusEnum_NOT_INTERESTED EntityPrefStatusEnum = 4
)

var EntityPrefStatusEnum_name = map[int32]string{
	0: "UNKNOWN",
	1: "FOLLOWED",
	2: "UNFOLLOWED",
	3: "BLOCKED",
	4: "NOT_INTERESTED",
}
var EntityPrefStatusEnum_value = map[string]int32{
	"UNKNOWN":        0,
	"FOLLOWED":       1,
	"UNFOLLOWED":     2,
	"BLOCKED":        3,
	"NOT_INTERESTED": 4,
}

func (x EntityPrefStatusEnum) String() string {
	return proto.EnumName(EntityPrefStatusEnum_name, int32(x))
}
func (EntityPrefStatusEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Metrics
type UnifiedMetric struct {
	ClickCnt       int64   `protobuf:"varint,1,opt,name=click_cnt,json=clickCnt" json:"click_cnt,omitempty"`
	ClickDs        float32 `protobuf:"fixed32,2,opt,name=click_ds,json=clickDs" json:"click_ds,omitempty"`
	ViewCnt        int64   `protobuf:"varint,3,opt,name=view_cnt,json=viewCnt" json:"view_cnt,omitempty"`
	ViewDs         float32 `protobuf:"fixed32,4,opt,name=view_ds,json=viewDs" json:"view_ds,omitempty"`
	LastDecay      int64   `protobuf:"varint,5,opt,name=last_decay,json=lastDecay" json:"last_decay,omitempty"`
	NumHourDecay   int32   `protobuf:"varint,6,opt,name=num_hour_decay,json=numHourDecay" json:"num_hour_decay,omitempty"`
	LastAccessTime int64   `protobuf:"varint,7,opt,name=last_access_time,json=lastAccessTime" json:"last_access_time,omitempty"`
	BounceCnt      int64   `protobuf:"varint,8,opt,name=bounce_cnt,json=bounceCnt" json:"bounce_cnt,omitempty"`
	BounceDs       float32 `protobuf:"fixed32,9,opt,name=bounce_ds,json=bounceDs" json:"bounce_ds,omitempty"`
	ShallowCnt     int64   `protobuf:"varint,10,opt,name=shallow_cnt,json=shallowCnt" json:"shallow_cnt,omitempty"`
	ShallowDs      float32 `protobuf:"fixed32,11,opt,name=shallow_ds,json=shallowDs" json:"shallow_ds,omitempty"`
	DeepCnt        int64   `protobuf:"varint,12,opt,name=deep_cnt,json=deepCnt" json:"deep_cnt,omitempty"`
	DeepDs         float32 `protobuf:"fixed32,13,opt,name=deep_ds,json=deepDs" json:"deep_ds,omitempty"`
	CompleteCnt    int64   `protobuf:"varint,14,opt,name=complete_cnt,json=completeCnt" json:"complete_cnt,omitempty"`
	CompleteDs     float32 `protobuf:"fixed32,15,opt,name=complete_ds,json=completeDs" json:"complete_ds,omitempty"`
	Timespent      int64   `protobuf:"varint,16,opt,name=timespent" json:"timespent,omitempty"`
	LikeCnt        int64   `protobuf:"varint,17,opt,name=like_cnt,json=likeCnt" json:"like_cnt,omitempty"`
	LikeDs         float32 `protobuf:"fixed32,18,opt,name=like_ds,json=likeDs" json:"like_ds,omitempty"`
	ShareCnt       int64   `protobuf:"varint,19,opt,name=share_cnt,json=shareCnt" json:"share_cnt,omitempty"`
	ShareDs        float32 `protobuf:"fixed32,20,opt,name=share_ds,json=shareDs" json:"share_ds,omitempty"`
	DislikeCnt     int64   `protobuf:"varint,21,opt,name=dislike_cnt,json=dislikeCnt" json:"dislike_cnt,omitempty"`
	DislikeDs      float32 `protobuf:"fixed32,22,opt,name=dislike_ds,json=dislikeDs" json:"dislike_ds,omitempty"`
	CommentCnt     int64   `protobuf:"varint,23,opt,name=comment_cnt,json=commentCnt" json:"comment_cnt,omitempty"`
	CommentDs      float32 `protobuf:"fixed32,24,opt,name=comment_ds,json=commentDs" json:"comment_ds,omitempty"`
	ShowMoreCnt    int64   `protobuf:"varint,25,opt,name=show_more_cnt,json=showMoreCnt" json:"show_more_cnt,omitempty"`
	ShowMoreDs     float32 `protobuf:"fixed32,26,opt,name=show_more_ds,json=showMoreDs" json:"show_more_ds,omitempty"`
}

func (m *UnifiedMetric) Reset()                    { *m = UnifiedMetric{} }
func (m *UnifiedMetric) String() string            { return proto.CompactTextString(m) }
func (*UnifiedMetric) ProtoMessage()               {}
func (*UnifiedMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UnifiedMetric) GetClickCnt() int64 {
	if m != nil {
		return m.ClickCnt
	}
	return 0
}

func (m *UnifiedMetric) GetClickDs() float32 {
	if m != nil {
		return m.ClickDs
	}
	return 0
}

func (m *UnifiedMetric) GetViewCnt() int64 {
	if m != nil {
		return m.ViewCnt
	}
	return 0
}

func (m *UnifiedMetric) GetViewDs() float32 {
	if m != nil {
		return m.ViewDs
	}
	return 0
}

func (m *UnifiedMetric) GetLastDecay() int64 {
	if m != nil {
		return m.LastDecay
	}
	return 0
}

func (m *UnifiedMetric) GetNumHourDecay() int32 {
	if m != nil {
		return m.NumHourDecay
	}
	return 0
}

func (m *UnifiedMetric) GetLastAccessTime() int64 {
	if m != nil {
		return m.LastAccessTime
	}
	return 0
}

func (m *UnifiedMetric) GetBounceCnt() int64 {
	if m != nil {
		return m.BounceCnt
	}
	return 0
}

func (m *UnifiedMetric) GetBounceDs() float32 {
	if m != nil {
		return m.BounceDs
	}
	return 0
}

func (m *UnifiedMetric) GetShallowCnt() int64 {
	if m != nil {
		return m.ShallowCnt
	}
	return 0
}

func (m *UnifiedMetric) GetShallowDs() float32 {
	if m != nil {
		return m.ShallowDs
	}
	return 0
}

func (m *UnifiedMetric) GetDeepCnt() int64 {
	if m != nil {
		return m.DeepCnt
	}
	return 0
}

func (m *UnifiedMetric) GetDeepDs() float32 {
	if m != nil {
		return m.DeepDs
	}
	return 0
}

func (m *UnifiedMetric) GetCompleteCnt() int64 {
	if m != nil {
		return m.CompleteCnt
	}
	return 0
}

func (m *UnifiedMetric) GetCompleteDs() float32 {
	if m != nil {
		return m.CompleteDs
	}
	return 0
}

func (m *UnifiedMetric) GetTimespent() int64 {
	if m != nil {
		return m.Timespent
	}
	return 0
}

func (m *UnifiedMetric) GetLikeCnt() int64 {
	if m != nil {
		return m.LikeCnt
	}
	return 0
}

func (m *UnifiedMetric) GetLikeDs() float32 {
	if m != nil {
		return m.LikeDs
	}
	return 0
}

func (m *UnifiedMetric) GetShareCnt() int64 {
	if m != nil {
		return m.ShareCnt
	}
	return 0
}

func (m *UnifiedMetric) GetShareDs() float32 {
	if m != nil {
		return m.ShareDs
	}
	return 0
}

func (m *UnifiedMetric) GetDislikeCnt() int64 {
	if m != nil {
		return m.DislikeCnt
	}
	return 0
}

func (m *UnifiedMetric) GetDislikeDs() float32 {
	if m != nil {
		return m.DislikeDs
	}
	return 0
}

func (m *UnifiedMetric) GetCommentCnt() int64 {
	if m != nil {
		return m.CommentCnt
	}
	return 0
}

func (m *UnifiedMetric) GetCommentDs() float32 {
	if m != nil {
		return m.CommentDs
	}
	return 0
}

func (m *UnifiedMetric) GetShowMoreCnt() int64 {
	if m != nil {
		return m.ShowMoreCnt
	}
	return 0
}

func (m *UnifiedMetric) GetShowMoreDs() float32 {
	if m != nil {
		return m.ShowMoreDs
	}
	return 0
}

// Renamed FollowMetric: EntityPrefMetric
type EntityPrefMetric struct {
	LastAccessTime int64                `protobuf:"varint,1,opt,name=last_access_time,json=lastAccessTime" json:"last_access_time,omitempty"`
	Status         EntityPrefStatusEnum `protobuf:"varint,2,opt,name=status,enum=userprofile.EntityPrefStatusEnum" json:"status,omitempty"`
	StatusCnt      int64                `protobuf:"varint,3,opt,name=status_cnt,json=statusCnt" json:"status_cnt,omitempty"`
}

func (m *EntityPrefMetric) Reset()                    { *m = EntityPrefMetric{} }
func (m *EntityPrefMetric) String() string            { return proto.CompactTextString(m) }
func (*EntityPrefMetric) ProtoMessage()               {}
func (*EntityPrefMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EntityPrefMetric) GetLastAccessTime() int64 {
	if m != nil {
		return m.LastAccessTime
	}
	return 0
}

func (m *EntityPrefMetric) GetStatus() EntityPrefStatusEnum {
	if m != nil {
		return m.Status
	}
	return EntityPrefStatusEnum_UNKNOWN
}

func (m *EntityPrefMetric) GetStatusCnt() int64 {
	if m != nil {
		return m.StatusCnt
	}
	return 0
}

type AccessMetric struct {
	LastAccessTime int64 `protobuf:"varint,1,opt,name=last_access_time,json=lastAccessTime" json:"last_access_time,omitempty"`
	AccessCnt      int64 `protobuf:"varint,2,opt,name=access_cnt,json=accessCnt" json:"access_cnt,omitempty"`
}

func (m *AccessMetric) Reset()                    { *m = AccessMetric{} }
func (m *AccessMetric) String() string            { return proto.CompactTextString(m) }
func (*AccessMetric) ProtoMessage()               {}
func (*AccessMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AccessMetric) GetLastAccessTime() int64 {
	if m != nil {
		return m.LastAccessTime
	}
	return 0
}

func (m *AccessMetric) GetAccessCnt() int64 {
	if m != nil {
		return m.AccessCnt
	}
	return 0
}

// Renamed DislikeMetric: ItemPrefMetric
type ItemPrefMetric struct {
	LastAccessTime int64 `protobuf:"varint,1,opt,name=last_access_time,json=lastAccessTime" json:"last_access_time,omitempty"`
	DislikeCnt     int64 `protobuf:"varint,2,opt,name=dislike_cnt,json=dislikeCnt" json:"dislike_cnt,omitempty"`
}

func (m *ItemPrefMetric) Reset()                    { *m = ItemPrefMetric{} }
func (m *ItemPrefMetric) String() string            { return proto.CompactTextString(m) }
func (*ItemPrefMetric) ProtoMessage()               {}
func (*ItemPrefMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ItemPrefMetric) GetLastAccessTime() int64 {
	if m != nil {
		return m.LastAccessTime
	}
	return 0
}

func (m *ItemPrefMetric) GetDislikeCnt() int64 {
	if m != nil {
		return m.DislikeCnt
	}
	return 0
}

type CollectionPrefMetric struct {
	LastAccessTime int64 `protobuf:"varint,1,opt,name=last_access_time,json=lastAccessTime" json:"last_access_time,omitempty"`
	DislikeCnt     int64 `protobuf:"varint,2,opt,name=dislike_cnt,json=dislikeCnt" json:"dislike_cnt,omitempty"`
}

func (m *CollectionPrefMetric) Reset()                    { *m = CollectionPrefMetric{} }
func (m *CollectionPrefMetric) String() string            { return proto.CompactTextString(m) }
func (*CollectionPrefMetric) ProtoMessage()               {}
func (*CollectionPrefMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CollectionPrefMetric) GetLastAccessTime() int64 {
	if m != nil {
		return m.LastAccessTime
	}
	return 0
}

func (m *CollectionPrefMetric) GetDislikeCnt() int64 {
	if m != nil {
		return m.DislikeCnt
	}
	return 0
}

type UPIPrefMetric struct {
	LastAccessTime int64  `protobuf:"varint,1,opt,name=last_access_time,json=lastAccessTime" json:"last_access_time,omitempty"`
	UpiVal         string `protobuf:"bytes,2,opt,name=upi_val,json=upiVal" json:"upi_val,omitempty"`
}

func (m *UPIPrefMetric) Reset()                    { *m = UPIPrefMetric{} }
func (m *UPIPrefMetric) String() string            { return proto.CompactTextString(m) }
func (*UPIPrefMetric) ProtoMessage()               {}
func (*UPIPrefMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UPIPrefMetric) GetLastAccessTime() int64 {
	if m != nil {
		return m.LastAccessTime
	}
	return 0
}

func (m *UPIPrefMetric) GetUpiVal() string {
	if m != nil {
		return m.UpiVal
	}
	return ""
}

// Redis/Cache metric
type CUnifiedMetric struct {
	CardMetric       *UnifiedMetric `protobuf:"bytes,1,opt,name=card_metric,json=cardMetric" json:"card_metric,omitempty"`
	SwipeMetric      *UnifiedMetric `protobuf:"bytes,2,opt,name=swipe_metric,json=swipeMetric" json:"swipe_metric,omitempty"`
	NotifMetric      *UnifiedMetric `protobuf:"bytes,3,opt,name=notif_metric,json=notifMetric" json:"notif_metric,omitempty"`
	EngagementMetric *UnifiedMetric `protobuf:"bytes,4,opt,name=engagement_metric,json=engagementMetric" json:"engagement_metric,omitempty"`
}

func (m *CUnifiedMetric) Reset()                    { *m = CUnifiedMetric{} }
func (m *CUnifiedMetric) String() string            { return proto.CompactTextString(m) }
func (*CUnifiedMetric) ProtoMessage()               {}
func (*CUnifiedMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CUnifiedMetric) GetCardMetric() *UnifiedMetric {
	if m != nil {
		return m.CardMetric
	}
	return nil
}

func (m *CUnifiedMetric) GetSwipeMetric() *UnifiedMetric {
	if m != nil {
		return m.SwipeMetric
	}
	return nil
}

func (m *CUnifiedMetric) GetNotifMetric() *UnifiedMetric {
	if m != nil {
		return m.NotifMetric
	}
	return nil
}

func (m *CUnifiedMetric) GetEngagementMetric() *UnifiedMetric {
	if m != nil {
		return m.EngagementMetric
	}
	return nil
}

// Messages
type Featurewise struct {
	Ig         map[string]*UnifiedMetric `protobuf:"bytes,1,rep,name=ig" json:"ig,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Loc        map[string]*UnifiedMetric `protobuf:"bytes,2,rep,name=loc" json:"loc,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Ner        map[string]*UnifiedMetric `protobuf:"bytes,3,rep,name=ner" json:"ner,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Type       map[string]*UnifiedMetric `protobuf:"bytes,4,rep,name=type" json:"type,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Src        map[string]*UnifiedMetric `protobuf:"bytes,5,rep,name=src" json:"src,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Pqs        map[string]*UnifiedMetric `protobuf:"bytes,6,rep,name=pqs" json:"pqs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Nsfw       map[string]*UnifiedMetric `protobuf:"bytes,7,rep,name=nsfw" json:"nsfw,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Lang       map[string]*UnifiedMetric `protobuf:"bytes,8,rep,name=lang" json:"lang,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Feed       map[string]*UnifiedMetric `protobuf:"bytes,9,rep,name=feed" json:"feed,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Grp        map[string]*UnifiedMetric `protobuf:"bytes,10,rep,name=grp" json:"grp,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Tab        map[string]*UnifiedMetric `protobuf:"bytes,11,rep,name=tab" json:"tab,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Info       map[string]*UnifiedMetric `protobuf:"bytes,12,rep,name=info" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Genre      map[string]*UnifiedMetric `protobuf:"bytes,13,rep,name=genre" json:"genre,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SubGenre   map[string]*UnifiedMetric `protobuf:"bytes,14,rep,name=sub_genre,json=subGenre" json:"sub_genre,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UcType     map[string]*UnifiedMetric `protobuf:"bytes,15,rep,name=uc_type,json=ucType" json:"uc_type,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UcsType    map[string]*UnifiedMetric `protobuf:"bytes,16,rep,name=ucs_type,json=ucsType" json:"ucs_type,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ULoc       map[string]*UnifiedMetric `protobuf:"bytes,17,rep,name=u_loc,json=uLoc" json:"u_loc,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UiType     map[string]*UnifiedMetric `protobuf:"bytes,18,rep,name=ui_type,json=uiType" json:"ui_type,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Channel    map[string]*UnifiedMetric `protobuf:"bytes,19,rep,name=channel" json:"channel,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Cat        map[string]*UnifiedMetric `protobuf:"bytes,20,rep,name=cat" json:"cat,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Topic      map[string]*UnifiedMetric `protobuf:"bytes,21,rep,name=topic" json:"topic,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Tag        map[string]*UnifiedMetric `protobuf:"bytes,22,rep,name=tag" json:"tag,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Collection map[string]*UnifiedMetric `protobuf:"bytes,23,rep,name=collection" json:"collection,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Featurewise) Reset()                    { *m = Featurewise{} }
func (m *Featurewise) String() string            { return proto.CompactTextString(m) }
func (*Featurewise) ProtoMessage()               {}
func (*Featurewise) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Featurewise) GetIg() map[string]*UnifiedMetric {
	if m != nil {
		return m.Ig
	}
	return nil
}

func (m *Featurewise) GetLoc() map[string]*UnifiedMetric {
	if m != nil {
		return m.Loc
	}
	return nil
}

func (m *Featurewise) GetNer() map[string]*UnifiedMetric {
	if m != nil {
		return m.Ner
	}
	return nil
}

func (m *Featurewise) GetType() map[string]*UnifiedMetric {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Featurewise) GetSrc() map[string]*UnifiedMetric {
	if m != nil {
		return m.Src
	}
	return nil
}

func (m *Featurewise) GetPqs() map[string]*UnifiedMetric {
	if m != nil {
		return m.Pqs
	}
	return nil
}

func (m *Featurewise) GetNsfw() map[string]*UnifiedMetric {
	if m != nil {
		return m.Nsfw
	}
	return nil
}

func (m *Featurewise) GetLang() map[string]*UnifiedMetric {
	if m != nil {
		return m.Lang
	}
	return nil
}

func (m *Featurewise) GetFeed() map[string]*UnifiedMetric {
	if m != nil {
		return m.Feed
	}
	return nil
}

func (m *Featurewise) GetGrp() map[string]*UnifiedMetric {
	if m != nil {
		return m.Grp
	}
	return nil
}

func (m *Featurewise) GetTab() map[string]*UnifiedMetric {
	if m != nil {
		return m.Tab
	}
	return nil
}

func (m *Featurewise) GetInfo() map[string]*UnifiedMetric {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *Featurewise) GetGenre() map[string]*UnifiedMetric {
	if m != nil {
		return m.Genre
	}
	return nil
}

func (m *Featurewise) GetSubGenre() map[string]*UnifiedMetric {
	if m != nil {
		return m.SubGenre
	}
	return nil
}

func (m *Featurewise) GetUcType() map[string]*UnifiedMetric {
	if m != nil {
		return m.UcType
	}
	return nil
}

func (m *Featurewise) GetUcsType() map[string]*UnifiedMetric {
	if m != nil {
		return m.UcsType
	}
	return nil
}

func (m *Featurewise) GetULoc() map[string]*UnifiedMetric {
	if m != nil {
		return m.ULoc
	}
	return nil
}

func (m *Featurewise) GetUiType() map[string]*UnifiedMetric {
	if m != nil {
		return m.UiType
	}
	return nil
}

func (m *Featurewise) GetChannel() map[string]*UnifiedMetric {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *Featurewise) GetCat() map[string]*UnifiedMetric {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *Featurewise) GetTopic() map[string]*UnifiedMetric {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *Featurewise) GetTag() map[string]*UnifiedMetric {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *Featurewise) GetCollection() map[string]*UnifiedMetric {
	if m != nil {
		return m.Collection
	}
	return nil
}

type CFeaturewise struct {
	Ig         map[string]*CUnifiedMetric `protobuf:"bytes,1,rep,name=ig" json:"ig,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Loc        map[string]*CUnifiedMetric `protobuf:"bytes,2,rep,name=loc" json:"loc,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Ner        map[string]*CUnifiedMetric `protobuf:"bytes,3,rep,name=ner" json:"ner,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Type       map[string]*CUnifiedMetric `protobuf:"bytes,4,rep,name=type" json:"type,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Src        map[string]*CUnifiedMetric `protobuf:"bytes,5,rep,name=src" json:"src,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Pqs        map[string]*CUnifiedMetric `protobuf:"bytes,6,rep,name=pqs" json:"pqs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Nsfw       map[string]*CUnifiedMetric `protobuf:"bytes,7,rep,name=nsfw" json:"nsfw,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Lang       map[string]*CUnifiedMetric `protobuf:"bytes,8,rep,name=lang" json:"lang,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Feed       map[string]*CUnifiedMetric `protobuf:"bytes,9,rep,name=feed" json:"feed,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Grp        map[string]*CUnifiedMetric `protobuf:"bytes,10,rep,name=grp" json:"grp,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Tab        map[string]*CUnifiedMetric `protobuf:"bytes,11,rep,name=tab" json:"tab,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Info       map[string]*CUnifiedMetric `protobuf:"bytes,12,rep,name=info" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Genre      map[string]*CUnifiedMetric `protobuf:"bytes,13,rep,name=genre" json:"genre,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SubGenre   map[string]*CUnifiedMetric `protobuf:"bytes,14,rep,name=sub_genre,json=subGenre" json:"sub_genre,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UcType     map[string]*CUnifiedMetric `protobuf:"bytes,15,rep,name=uc_type,json=ucType" json:"uc_type,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UcsType    map[string]*CUnifiedMetric `protobuf:"bytes,16,rep,name=ucs_type,json=ucsType" json:"ucs_type,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ULoc       map[string]*CUnifiedMetric `protobuf:"bytes,17,rep,name=u_loc,json=uLoc" json:"u_loc,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UiType     map[string]*CUnifiedMetric `protobuf:"bytes,18,rep,name=ui_type,json=uiType" json:"ui_type,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Channel    map[string]*CUnifiedMetric `protobuf:"bytes,19,rep,name=channel" json:"channel,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Cat        map[string]*CUnifiedMetric `protobuf:"bytes,20,rep,name=cat" json:"cat,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Topic      map[string]*CUnifiedMetric `protobuf:"bytes,21,rep,name=topic" json:"topic,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Tag        map[string]*CUnifiedMetric `protobuf:"bytes,22,rep,name=tag" json:"tag,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Collection map[string]*CUnifiedMetric `protobuf:"bytes,23,rep,name=collection" json:"collection,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CFeaturewise) Reset()                    { *m = CFeaturewise{} }
func (m *CFeaturewise) String() string            { return proto.CompactTextString(m) }
func (*CFeaturewise) ProtoMessage()               {}
func (*CFeaturewise) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CFeaturewise) GetIg() map[string]*CUnifiedMetric {
	if m != nil {
		return m.Ig
	}
	return nil
}

func (m *CFeaturewise) GetLoc() map[string]*CUnifiedMetric {
	if m != nil {
		return m.Loc
	}
	return nil
}

func (m *CFeaturewise) GetNer() map[string]*CUnifiedMetric {
	if m != nil {
		return m.Ner
	}
	return nil
}

func (m *CFeaturewise) GetType() map[string]*CUnifiedMetric {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *CFeaturewise) GetSrc() map[string]*CUnifiedMetric {
	if m != nil {
		return m.Src
	}
	return nil
}

func (m *CFeaturewise) GetPqs() map[string]*CUnifiedMetric {
	if m != nil {
		return m.Pqs
	}
	return nil
}

func (m *CFeaturewise) GetNsfw() map[string]*CUnifiedMetric {
	if m != nil {
		return m.Nsfw
	}
	return nil
}

func (m *CFeaturewise) GetLang() map[string]*CUnifiedMetric {
	if m != nil {
		return m.Lang
	}
	return nil
}

func (m *CFeaturewise) GetFeed() map[string]*CUnifiedMetric {
	if m != nil {
		return m.Feed
	}
	return nil
}

func (m *CFeaturewise) GetGrp() map[string]*CUnifiedMetric {
	if m != nil {
		return m.Grp
	}
	return nil
}

func (m *CFeaturewise) GetTab() map[string]*CUnifiedMetric {
	if m != nil {
		return m.Tab
	}
	return nil
}

func (m *CFeaturewise) GetInfo() map[string]*CUnifiedMetric {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *CFeaturewise) GetGenre() map[string]*CUnifiedMetric {
	if m != nil {
		return m.Genre
	}
	return nil
}

func (m *CFeaturewise) GetSubGenre() map[string]*CUnifiedMetric {
	if m != nil {
		return m.SubGenre
	}
	return nil
}

func (m *CFeaturewise) GetUcType() map[string]*CUnifiedMetric {
	if m != nil {
		return m.UcType
	}
	return nil
}

func (m *CFeaturewise) GetUcsType() map[string]*CUnifiedMetric {
	if m != nil {
		return m.UcsType
	}
	return nil
}

func (m *CFeaturewise) GetULoc() map[string]*CUnifiedMetric {
	if m != nil {
		return m.ULoc
	}
	return nil
}

func (m *CFeaturewise) GetUiType() map[string]*CUnifiedMetric {
	if m != nil {
		return m.UiType
	}
	return nil
}

func (m *CFeaturewise) GetChannel() map[string]*CUnifiedMetric {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *CFeaturewise) GetCat() map[string]*CUnifiedMetric {
	if m != nil {
		return m.Cat
	}
	return nil
}

func (m *CFeaturewise) GetTopic() map[string]*CUnifiedMetric {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *CFeaturewise) GetTag() map[string]*CUnifiedMetric {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *CFeaturewise) GetCollection() map[string]*CUnifiedMetric {
	if m != nil {
		return m.Collection
	}
	return nil
}

type TabAccess struct {
	Tab map[string]*AccessMetric `protobuf:"bytes,1,rep,name=tab" json:"tab,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TabAccess) Reset()                    { *m = TabAccess{} }
func (m *TabAccess) String() string            { return proto.CompactTextString(m) }
func (*TabAccess) ProtoMessage()               {}
func (*TabAccess) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *TabAccess) GetTab() map[string]*AccessMetric {
	if m != nil {
		return m.Tab
	}
	return nil
}

type TabAccessNS struct {
	Values map[string]*TabAccess `protobuf:"bytes,1,rep,name=values" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TabAccessNS) Reset()                    { *m = TabAccessNS{} }
func (m *TabAccessNS) String() string            { return proto.CompactTextString(m) }
func (*TabAccessNS) ProtoMessage()               {}
func (*TabAccessNS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TabAccessNS) GetValues() map[string]*TabAccess {
	if m != nil {
		return m.Values
	}
	return nil
}

// Renamed FollowStatus: EntityPref
type EntityPref struct {
	Pref map[string]*EntityPrefMetric `protobuf:"bytes,1,rep,name=pref" json:"pref,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *EntityPref) Reset()                    { *m = EntityPref{} }
func (m *EntityPref) String() string            { return proto.CompactTextString(m) }
func (*EntityPref) ProtoMessage()               {}
func (*EntityPref) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *EntityPref) GetPref() map[string]*EntityPrefMetric {
	if m != nil {
		return m.Pref
	}
	return nil
}

// Renamed FollowStatusNS: EntityPrefs
type EntityPrefs struct {
	Values map[string]*EntityPref `protobuf:"bytes,1,rep,name=values" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *EntityPrefs) Reset()                    { *m = EntityPrefs{} }
func (m *EntityPrefs) String() string            { return proto.CompactTextString(m) }
func (*EntityPrefs) ProtoMessage()               {}
func (*EntityPrefs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *EntityPrefs) GetValues() map[string]*EntityPref {
	if m != nil {
		return m.Values
	}
	return nil
}

type UPIPref struct {
	Pref map[string]*UPIPrefMetric `protobuf:"bytes,1,rep,name=pref" json:"pref,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UPIPref) Reset()                    { *m = UPIPref{} }
func (m *UPIPref) String() string            { return proto.CompactTextString(m) }
func (*UPIPref) ProtoMessage()               {}
func (*UPIPref) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *UPIPref) GetPref() map[string]*UPIPrefMetric {
	if m != nil {
		return m.Pref
	}
	return nil
}

type UPIPrefs struct {
	Values map[string]*UPIPref `protobuf:"bytes,1,rep,name=values" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UPIPrefs) Reset()                    { *m = UPIPrefs{} }
func (m *UPIPrefs) String() string            { return proto.CompactTextString(m) }
func (*UPIPrefs) ProtoMessage()               {}
func (*UPIPrefs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *UPIPrefs) GetValues() map[string]*UPIPref {
	if m != nil {
		return m.Values
	}
	return nil
}

// Renamed DislikePref: ItemPrefs
type ItemPrefs struct {
	Ig       map[string]*ItemPrefMetric `protobuf:"bytes,1,rep,name=ig" json:"ig,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Loc      map[string]*ItemPrefMetric `protobuf:"bytes,2,rep,name=loc" json:"loc,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Src      map[string]*ItemPrefMetric `protobuf:"bytes,3,rep,name=src" json:"src,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Nsfw     map[string]*ItemPrefMetric `protobuf:"bytes,4,rep,name=nsfw" json:"nsfw,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Genre    map[string]*ItemPrefMetric `protobuf:"bytes,5,rep,name=genre" json:"genre,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SubGenre map[string]*ItemPrefMetric `protobuf:"bytes,6,rep,name=sub_genre,json=subGenre" json:"sub_genre,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Info     map[string]*ItemPrefMetric `protobuf:"bytes,7,rep,name=info" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ItemPrefs) Reset()                    { *m = ItemPrefs{} }
func (m *ItemPrefs) String() string            { return proto.CompactTextString(m) }
func (*ItemPrefs) ProtoMessage()               {}
func (*ItemPrefs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ItemPrefs) GetIg() map[string]*ItemPrefMetric {
	if m != nil {
		return m.Ig
	}
	return nil
}

func (m *ItemPrefs) GetLoc() map[string]*ItemPrefMetric {
	if m != nil {
		return m.Loc
	}
	return nil
}

func (m *ItemPrefs) GetSrc() map[string]*ItemPrefMetric {
	if m != nil {
		return m.Src
	}
	return nil
}

func (m *ItemPrefs) GetNsfw() map[string]*ItemPrefMetric {
	if m != nil {
		return m.Nsfw
	}
	return nil
}

func (m *ItemPrefs) GetGenre() map[string]*ItemPrefMetric {
	if m != nil {
		return m.Genre
	}
	return nil
}

func (m *ItemPrefs) GetSubGenre() map[string]*ItemPrefMetric {
	if m != nil {
		return m.SubGenre
	}
	return nil
}

func (m *ItemPrefs) GetInfo() map[string]*ItemPrefMetric {
	if m != nil {
		return m.Info
	}
	return nil
}

type CollectionPrefs struct {
	Id map[string]*CollectionPrefMetric `protobuf:"bytes,1,rep,name=id" json:"id,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CollectionPrefs) Reset()                    { *m = CollectionPrefs{} }
func (m *CollectionPrefs) String() string            { return proto.CompactTextString(m) }
func (*CollectionPrefs) ProtoMessage()               {}
func (*CollectionPrefs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CollectionPrefs) GetId() map[string]*CollectionPrefMetric {
	if m != nil {
		return m.Id
	}
	return nil
}

func init() {
	proto.RegisterType((*UnifiedMetric)(nil), "userprofile.UnifiedMetric")
	proto.RegisterType((*EntityPrefMetric)(nil), "userprofile.EntityPrefMetric")
	proto.RegisterType((*AccessMetric)(nil), "userprofile.AccessMetric")
	proto.RegisterType((*ItemPrefMetric)(nil), "userprofile.ItemPrefMetric")
	proto.RegisterType((*CollectionPrefMetric)(nil), "userprofile.CollectionPrefMetric")
	proto.RegisterType((*UPIPrefMetric)(nil), "userprofile.UPIPrefMetric")
	proto.RegisterType((*CUnifiedMetric)(nil), "userprofile.CUnifiedMetric")
	proto.RegisterType((*Featurewise)(nil), "userprofile.Featurewise")
	proto.RegisterType((*CFeaturewise)(nil), "userprofile.CFeaturewise")
	proto.RegisterType((*TabAccess)(nil), "userprofile.TabAccess")
	proto.RegisterType((*TabAccessNS)(nil), "userprofile.TabAccessNS")
	proto.RegisterType((*EntityPref)(nil), "userprofile.EntityPref")
	proto.RegisterType((*EntityPrefs)(nil), "userprofile.EntityPrefs")
	proto.RegisterType((*UPIPref)(nil), "userprofile.UPIPref")
	proto.RegisterType((*UPIPrefs)(nil), "userprofile.UPIPrefs")
	proto.RegisterType((*ItemPrefs)(nil), "userprofile.ItemPrefs")
	proto.RegisterType((*CollectionPrefs)(nil), "userprofile.CollectionPrefs")
	proto.RegisterEnum("userprofile.EntityPrefStatusEnum", EntityPrefStatusEnum_name, EntityPrefStatusEnum_value)
}

func init() { proto.RegisterFile("unified_metrics.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2035 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5a, 0xdd, 0x72, 0xdb, 0xc6,
	0x15, 0x2e, 0x49, 0x89, 0x3f, 0x87, 0x14, 0x43, 0x23, 0xb2, 0x05, 0xd3, 0x75, 0x2d, 0x31, 0x4e,
	0xaa, 0x66, 0x5a, 0x35, 0xb2, 0xd9, 0x2a, 0x76, 0x9b, 0x34, 0x2e, 0x29, 0x27, 0x9a, 0x28, 0x94,
	0x4d, 0x91, 0x52, 0xda, 0x5e, 0x70, 0x40, 0x70, 0x49, 0x61, 0x4c, 0x02, 0x34, 0x16, 0xb0, 0x46,
	0x8f, 0xd1, 0x4e, 0x27, 0x37, 0xed, 0xb4, 0xd3, 0x17, 0xe8, 0x53, 0xf5, 0xb6, 0xef, 0xd0, 0xd9,
	0x1f, 0x90, 0xbb, 0x24, 0xb0, 0x48, 0x21, 0xe4, 0x46, 0xc3, 0x3d, 0x38, 0xdf, 0x87, 0x6f, 0xcf,
	0xfe, 0xe1, 0x03, 0x04, 0x77, 0x7d, 0xdb, 0x1a, 0x5b, 0x68, 0x34, 0x98, 0x21, 0xcf, 0xb5, 0x4c,
	0x7c, 0x30, 0x77, 0x1d, 0xcf, 0xd1, 0xca, 0x3e, 0x46, 0xee, 0xdc, 0x75, 0xc6, 0xd6, 0x14, 0x35,
	0xfe, 0x9d, 0x87, 0xad, 0x3e, 0x4b, 0xfb, 0x86, 0x66, 0x69, 0x0f, 0xa0, 0x64, 0x4e, 0x2d, 0xf3,
	0xcd, 0xc0, 0xb4, 0x3d, 0x3d, 0xb3, 0x9b, 0xd9, 0xcf, 0x75, 0x8b, 0x34, 0xd0, 0xb2, 0x3d, 0xed,
	0x3e, 0xb0, 0xdf, 0x83, 0x11, 0xd6, 0xb3, 0xbb, 0x99, 0xfd, 0x6c, 0xb7, 0x40, 0xdb, 0x6d, 0x4c,
	0x2e, 0xbd, 0xb3, 0xd0, 0x35, 0x85, 0xe5, 0x28, 0xac, 0x40, 0xda, 0x04, 0xb5, 0x03, 0xf4, 0x27,
	0x01, 0x6d, 0x50, 0x50, 0x9e, 0x34, 0xdb, 0x58, 0x7b, 0x08, 0x30, 0x35, 0xb0, 0x37, 0x18, 0x21,
	0xd3, 0xb8, 0xd1, 0x37, 0x29, 0xaa, 0x44, 0x22, 0x6d, 0x12, 0xd0, 0x1e, 0x43, 0xd5, 0xf6, 0x67,
	0x83, 0x2b, 0xc7, 0x77, 0x79, 0x4a, 0x7e, 0x37, 0xb3, 0xbf, 0xd9, 0xad, 0xd8, 0xfe, 0xec, 0x2b,
	0xc7, 0x77, 0x59, 0xd6, 0x3e, 0xd4, 0x28, 0x89, 0x61, 0x9a, 0x08, 0xe3, 0x81, 0x67, 0xcd, 0x90,
	0x5e, 0xa0, 0x54, 0x55, 0x12, 0x7f, 0x41, 0xc3, 0x3d, 0x6b, 0x86, 0xc8, 0xed, 0x86, 0x8e, 0x6f,
	0x9b, 0x88, 0x8a, 0x2c, 0xb2, 0xdb, 0xb1, 0x08, 0x91, 0xf9, 0x00, 0x78, 0x83, 0x08, 0x2d, 0x51,
	0xa1, 0x45, 0x16, 0x68, 0x63, 0xed, 0x11, 0x94, 0xf1, 0x95, 0x31, 0x9d, 0x3a, 0xac, 0x87, 0x40,
	0xc1, 0xc0, 0x43, 0x04, 0xfd, 0x10, 0x82, 0x16, 0x81, 0x97, 0x29, 0xbc, 0xc4, 0x23, 0xac, 0x3c,
	0x23, 0x84, 0xe6, 0x14, 0x5c, 0x61, 0xe5, 0x21, 0x6d, 0x5e, 0x1e, 0x7a, 0x69, 0x84, 0xf5, 0x2d,
	0x56, 0x1e, 0xd2, 0x6c, 0x63, 0x6d, 0x0f, 0x2a, 0xa6, 0x33, 0x9b, 0x4f, 0x91, 0xc7, 0x14, 0x57,
	0x29, 0xae, 0x1c, 0xc4, 0x08, 0xf6, 0x11, 0x2c, 0x9a, 0x04, 0xff, 0x1e, 0xc5, 0x43, 0x10, 0x6a,
	0x63, 0xed, 0xc7, 0x50, 0x22, 0x15, 0xc1, 0x73, 0x64, 0x7b, 0x7a, 0x8d, 0x75, 0x79, 0x11, 0x20,
	0xaa, 0xa6, 0xd6, 0x1b, 0xc6, 0x7e, 0x87, 0xa9, 0x22, 0x6d, 0xae, 0x8a, 0x5e, 0x1a, 0x61, 0x5d,
	0x63, 0xaa, 0x48, 0xb3, 0x8d, 0x49, 0x99, 0xf0, 0x95, 0xe1, 0x32, 0xd0, 0xfb, 0x6c, 0x82, 0xd0,
	0x00, 0x9f, 0x20, 0xec, 0xe2, 0x08, 0xeb, 0xdb, 0x6c, 0x82, 0xd0, 0x36, 0xab, 0xe0, 0xc8, 0xc2,
	0x8b, 0xdb, 0xdd, 0x65, 0x15, 0xe4, 0x21, 0x5e, 0xc1, 0x20, 0x61, 0x84, 0xf5, 0x7b, 0xac, 0x82,
	0x3c, 0xc2, 0xf0, 0xa6, 0x33, 0x9b, 0x21, 0xdb, 0xa3, 0xf8, 0x1d, 0x86, 0xe7, 0x21, 0x8e, 0x0f,
	0x12, 0x46, 0x58, 0xd7, 0x19, 0x9e, 0x47, 0xda, 0x58, 0x6b, 0xc0, 0x16, 0xbe, 0x72, 0xae, 0x07,
	0x33, 0x87, 0x6b, 0xbf, 0xcf, 0xca, 0x49, 0x82, 0xdf, 0x38, 0x4c, 0xfe, 0x2e, 0x54, 0x96, 0x39,
	0x23, 0xac, 0xd7, 0x59, 0x3d, 0x83, 0x94, 0x36, 0x6e, 0x7c, 0x97, 0x81, 0xda, 0xb1, 0xed, 0x59,
	0xde, 0xcd, 0x2b, 0x17, 0x8d, 0xf9, 0x9a, 0x09, 0x9b, 0x82, 0x99, 0xd0, 0x29, 0xf8, 0x0c, 0xf2,
	0xd8, 0x33, 0x3c, 0x9f, 0x2d, 0x9f, 0xea, 0x93, 0xbd, 0x03, 0x61, 0x35, 0x1e, 0x2c, 0x89, 0xcf,
	0x69, 0xd2, 0xb1, 0xed, 0xcf, 0xba, 0x1c, 0x40, 0x27, 0x18, 0xfd, 0x25, 0x2c, 0xb1, 0x12, 0x8b,
	0xb4, 0x6c, 0xaf, 0x71, 0x09, 0x15, 0x76, 0x9f, 0xff, 0x5b, 0xd3, 0x43, 0x00, 0x9e, 0x44, 0x88,
	0xb3, 0x8c, 0x98, 0x45, 0x08, 0xf1, 0x9f, 0xa0, 0x7a, 0xe2, 0xa1, 0x59, 0xa2, 0xee, 0xae, 0x8c,
	0x79, 0x76, 0x75, 0xcc, 0x1b, 0x06, 0x6c, 0xb7, 0x9c, 0xe9, 0x14, 0x99, 0x9e, 0xe5, 0xd8, 0x3f,
	0xcc, 0x2d, 0xba, 0xb0, 0xd5, 0x7f, 0x75, 0x92, 0x88, 0x7b, 0x07, 0x0a, 0xfe, 0xdc, 0x1a, 0xbc,
	0x33, 0xa6, 0x94, 0xb7, 0xd4, 0xcd, 0xfb, 0x73, 0xeb, 0xc2, 0x98, 0x36, 0xfe, 0x9a, 0x85, 0x6a,
	0x4b, 0xde, 0x37, 0x7f, 0x03, 0x65, 0xd3, 0x70, 0x83, 0xcd, 0x96, 0x12, 0x96, 0x9f, 0xd4, 0xa5,
	0xe1, 0x95, 0x00, 0x5d, 0x20, 0xe9, 0x1c, 0xfc, 0x19, 0x54, 0xf0, 0xb5, 0x35, 0x47, 0x01, 0x3a,
	0x1b, 0x8b, 0x2e, 0xd3, 0xfc, 0x25, 0xdc, 0x76, 0x3c, 0x6b, 0x1c, 0xc0, 0x73, 0xf1, 0x70, 0x9a,
	0xcf, 0xe1, 0x5f, 0xc2, 0x1d, 0x64, 0x4f, 0x8c, 0x09, 0xa2, 0x6b, 0x87, 0x73, 0x6c, 0xc4, 0x72,
	0xd4, 0x96, 0x20, 0x16, 0x69, 0xfc, 0xf7, 0x3e, 0x94, 0x5f, 0x22, 0xc3, 0xf3, 0x5d, 0x74, 0x6d,
	0x61, 0xa4, 0x7d, 0x02, 0x59, 0x6b, 0xa2, 0x67, 0x76, 0x73, 0xfb, 0xe5, 0x27, 0xbb, 0x12, 0x93,
	0x90, 0x75, 0x70, 0x32, 0x39, 0xb6, 0x3d, 0xf7, 0xa6, 0x9b, 0xb5, 0x26, 0xda, 0x53, 0xc8, 0x4d,
	0x1d, 0xd2, 0x7f, 0x02, 0xd9, 0x8b, 0x84, 0x9c, 0x3a, 0x26, 0xc3, 0x90, 0x6c, 0x02, 0xb2, 0x91,
	0xab, 0xe7, 0x62, 0x40, 0x1d, 0xe4, 0x72, 0x90, 0x8d, 0x5c, 0xed, 0xd7, 0xb0, 0xe1, 0xdd, 0xcc,
	0x91, 0xbe, 0x41, 0x51, 0x8d, 0x48, 0x54, 0xef, 0x66, 0x8e, 0x18, 0x8c, 0xe6, 0x93, 0x9b, 0x61,
	0xd7, 0xd4, 0x37, 0x63, 0x6e, 0x76, 0xee, 0x06, 0x0a, 0xb1, 0x4b, 0x15, 0xce, 0xdf, 0x62, 0x3d,
	0x1f, 0x03, 0x7a, 0xf5, 0x16, 0x73, 0xd0, 0xfc, 0x2d, 0x26, 0x0a, 0x6d, 0x3c, 0xbe, 0xd6, 0x0b,
	0x31, 0x0a, 0x3b, 0x78, 0x7c, 0xcd, 0x15, 0x92, 0x7c, 0x82, 0x9b, 0x1a, 0xf6, 0x44, 0x2f, 0xc6,
	0xe0, 0x4e, 0x0d, 0x9b, 0x57, 0x9e, 0xe6, 0x13, 0xdc, 0x18, 0xa1, 0x91, 0x5e, 0x8a, 0xc1, 0xbd,
	0x44, 0x68, 0xc4, 0x71, 0x24, 0x9f, 0x74, 0x6e, 0xe2, 0xce, 0x75, 0x88, 0xe9, 0xdc, 0x97, 0xee,
	0x9c, 0x77, 0x6e, 0xe2, 0xce, 0x09, 0xc8, 0x33, 0x86, 0x7a, 0x39, 0x06, 0xd4, 0x33, 0x86, 0x1c,
	0xe4, 0x19, 0x43, 0xa2, 0xd0, 0xb2, 0xc7, 0x8e, 0x5e, 0x89, 0x51, 0x78, 0x62, 0x8f, 0x1d, 0xae,
	0x90, 0xe4, 0x6b, 0xcf, 0x60, 0x73, 0x82, 0x6c, 0x17, 0xe9, 0x5b, 0x14, 0xf8, 0x41, 0xb4, 0x46,
	0x92, 0xc5, 0x90, 0x0c, 0xa1, 0xb5, 0xa0, 0x84, 0xfd, 0xe1, 0x80, 0xc1, 0xab, 0x14, 0xfe, 0x51,
	0xf4, 0xa0, 0xfb, 0x43, 0x81, 0xa1, 0x88, 0x79, 0x53, 0xfb, 0x0c, 0x0a, 0xbe, 0x39, 0xa0, 0xd3,
	0xed, 0x3d, 0x4a, 0xf1, 0x38, 0x92, 0xa2, 0x6f, 0x2e, 0x27, 0x5c, 0xde, 0xa7, 0x0d, 0xed, 0x0b,
	0x28, 0xfa, 0x26, 0x66, 0xf8, 0x1a, 0xc5, 0x7f, 0xa8, 0xc0, 0xe3, 0x25, 0x41, 0xc1, 0x67, 0x2d,
	0xed, 0x08, 0x36, 0xfd, 0x01, 0x59, 0x58, 0x77, 0x62, 0x2a, 0xd7, 0x5f, 0xac, 0xac, 0x0d, 0xff,
	0xd4, 0x31, 0xa9, 0x72, 0x8b, 0xdd, 0x59, 0x8b, 0x53, 0x6e, 0x89, 0xca, 0x69, 0x43, 0xfb, 0x1d,
	0x14, 0xcc, 0x2b, 0xc3, 0xb6, 0xd1, 0x54, 0x7f, 0x3f, 0x46, 0x78, 0x8b, 0xe5, 0x71, 0xe1, 0x1c,
	0x45, 0xa6, 0x89, 0x69, 0x78, 0xfa, 0x76, 0xcc, 0x34, 0x69, 0x19, 0x1e, 0x9f, 0x26, 0xa6, 0xe1,
	0x91, 0xe1, 0xf6, 0x9c, 0xb9, 0x65, 0xea, 0x77, 0x63, 0x86, 0xbb, 0x47, 0xb2, 0xf8, 0x70, 0x53,
	0x04, 0x9b, 0x96, 0x13, 0xfd, 0x5e, 0xec, 0xb4, 0x9c, 0x2c, 0xa6, 0xe5, 0x44, 0xfb, 0x8a, 0x3c,
	0x78, 0x04, 0x87, 0x98, 0xbe, 0x43, 0xb1, 0xfb, 0xd1, 0x5a, 0x17, 0xa9, 0x8c, 0x42, 0xc0, 0xd6,
	0x5f, 0x43, 0x81, 0xef, 0x86, 0x5a, 0x0d, 0x72, 0x6f, 0xd0, 0x0d, 0x3d, 0x47, 0x4a, 0x5d, 0xf2,
	0x53, 0xfb, 0x04, 0x36, 0xdf, 0x19, 0x53, 0x1f, 0x7d, 0x8f, 0xd3, 0x81, 0x25, 0x3e, 0xcf, 0x7e,
	0x9a, 0xa9, 0x77, 0xa1, 0x18, 0x8c, 0x69, 0x9a, 0x9c, 0xc1, 0x66, 0x9a, 0x1a, 0xe7, 0x39, 0x94,
	0x16, 0xf3, 0x27, 0x4d, 0xa1, 0xc1, 0x46, 0x9c, 0x26, 0x67, 0xb0, 0x4f, 0xa7, 0xd9, 0xf9, 0xc5,
	0x2e, 0x9e, 0x26, 0xe9, 0x62, 0x8b, 0x4f, 0x93, 0x74, 0xb1, 0xff, 0xa7, 0x59, 0xd2, 0xe0, 0x74,
	0x48, 0x93, 0x33, 0x38, 0x3c, 0xd2, 0xec, 0xfc, 0xe2, 0x68, 0x49, 0x8d, 0xb4, 0x07, 0xb0, 0x3c,
	0x34, 0x52, 0x63, 0xbd, 0x84, 0x2d, 0xe9, 0x34, 0x4a, 0x8d, 0xb8, 0x0f, 0x65, 0xe1, 0x8c, 0x4a,
	0x8d, 0xf6, 0x02, 0x2a, 0xe2, 0xd1, 0x95, 0xe6, 0x90, 0xf5, 0x53, 0xdf, 0xff, 0x48, 0x0d, 0xac,
	0x1f, 0xa4, 0x06, 0xe2, 0x29, 0x98, 0xe6, 0x52, 0x08, 0x0e, 0xc8, 0x34, 0x67, 0xed, 0xf2, 0xf4,
	0x4c, 0x77, 0xd1, 0xa6, 0xbc, 0x63, 0xfd, 0x01, 0xde, 0x5b, 0x39, 0x72, 0xd3, 0xa2, 0x6e, 0xfc,
	0xbd, 0x0e, 0x95, 0x96, 0x68, 0x78, 0x0e, 0x05, 0xc3, 0x23, 0x3f, 0x3d, 0xb4, 0xa2, 0x1c, 0x4f,
	0x53, 0x74, 0x3c, 0x8d, 0x68, 0x8c, 0x6c, 0x79, 0x9a, 0xa2, 0xe5, 0x51, 0xa0, 0x64, 0xcf, 0x73,
	0x24, 0x79, 0x9e, 0x0f, 0xa2, 0x61, 0xab, 0xa6, 0xa7, 0x29, 0x9a, 0x1e, 0xc5, 0xed, 0x64, 0xd7,
	0xd3, 0x14, 0x5d, 0x8f, 0x02, 0x25, 0xdb, 0x9e, 0x23, 0xc9, 0xf6, 0x28, 0x44, 0xae, 0xfa, 0x9e,
	0x23, 0xc9, 0xf7, 0x28, 0x80, 0xab, 0xc6, 0xe7, 0x48, 0x32, 0x3e, 0x0a, 0xe0, 0xaa, 0xf3, 0x69,
	0x8a, 0xce, 0x47, 0xd1, 0x41, 0xd9, 0xfa, 0x34, 0x45, 0xeb, 0xa3, 0x40, 0xc9, 0xde, 0xe7, 0x48,
	0xf2, 0x3e, 0x0a, 0x91, 0xab, 0xe6, 0xe7, 0xb9, 0x6c, 0x7e, 0x1e, 0x2b, 0x64, 0xae, 0xb9, 0x9f,
	0xf6, 0xba, 0xfb, 0xf9, 0xa9, 0x62, 0xf4, 0x23, 0xec, 0xcf, 0xe7, 0xab, 0xf6, 0xe7, 0xc3, 0x68,
	0x8e, 0x30, 0xff, 0xf3, 0x62, 0xcd, 0xff, 0x7c, 0xa4, 0x22, 0x08, 0x33, 0x40, 0x9f, 0xca, 0x06,
	0x48, 0x51, 0xbe, 0x55, 0x07, 0xf4, 0xf9, 0xaa, 0x03, 0x52, 0x89, 0x0f, 0xb1, 0x40, 0x5f, 0xac,
	0x5a, 0x20, 0x85, 0xf6, 0x70, 0x0f, 0xd4, 0x14, 0x3d, 0x90, 0x62, 0xbe, 0xc8, 0x26, 0xe8, 0xb9,
	0x6c, 0x82, 0x14, 0xc3, 0xbe, 0xee, 0x82, 0x9a, 0xa2, 0x0b, 0x52, 0xce, 0x50, 0xd1, 0x06, 0x9d,
	0x84, 0xd8, 0xa0, 0x9f, 0x29, 0xe4, 0x2a, 0x7c, 0x50, 0x57, 0xe5, 0x83, 0x0e, 0xe5, 0xbd, 0xfa,
	0x81, 0x7c, 0x0b, 0xc5, 0x93, 0x80, 0xca, 0x08, 0x25, 0x27, 0x55, 0x38, 0xa1, 0x84, 0xa4, 0x3d,
	0xb5, 0x15, 0x4a, 0x2e, 0x55, 0xe1, 0x85, 0x92, 0x93, 0x2a, 0xcc, 0x50, 0xf2, 0xfe, 0xab, 0xdc,
	0x50, 0x72, 0x56, 0x95, 0x1d, 0x4a, 0xce, 0xaa, 0xf2, 0x43, 0xc9, 0xcb, 0xaa, 0x30, 0x44, 0xc9,
	0x49, 0x15, 0x8e, 0x28, 0x79, 0xff, 0x55, 0x96, 0x28, 0x21, 0x6b, 0x3f, 0xc6, 0x13, 0x25, 0xa4,
	0xfd, 0x36, 0xde, 0x14, 0x25, 0x64, 0xbe, 0x88, 0x73, 0x45, 0x09, 0x79, 0x2f, 0x63, 0x6d, 0x51,
	0xf2, 0x71, 0xeb, 0xa7, 0xbf, 0x1d, 0x5e, 0xc4, 0x19, 0xa3, 0xe4, 0x65, 0x88, 0x71, 0x46, 0xc9,
	0xd7, 0x84, 0xc2, 0x1a, 0x25, 0x9f, 0xbd, 0x4a, 0x6f, 0x74, 0x9b, 0xf5, 0x9b, 0xf6, 0xfe, 0xf5,
	0xc7, 0xef, 0xe3, 0x8e, 0x92, 0x71, 0x37, 0xfe, 0x9c, 0x81, 0x52, 0xcf, 0x18, 0xb2, 0x0f, 0x6a,
	0xda, 0x21, 0x7b, 0xec, 0x65, 0xe6, 0xe8, 0x91, 0x44, 0xb1, 0x48, 0x92, 0x9f, 0x79, 0xeb, 0xaf,
	0x95, 0x3b, 0xd6, 0x2f, 0x65, 0x55, 0xf7, 0x25, 0x4a, 0xf1, 0x5b, 0xa8, 0xa8, 0xe9, 0x1f, 0x19,
	0x28, 0x2f, 0x6e, 0xd7, 0x39, 0xd7, 0x7e, 0x0b, 0x79, 0x7a, 0x11, 0x73, 0x61, 0x8f, 0xc3, 0x85,
	0x75, 0xce, 0x0f, 0x2e, 0x68, 0x1a, 0x7f, 0xb8, 0x63, 0x98, 0xfa, 0x6b, 0x28, 0x0b, 0xe1, 0x10,
	0x8d, 0x3f, 0x97, 0x35, 0xde, 0x0b, 0x67, 0x17, 0x05, 0xfe, 0x2d, 0x03, 0xb0, 0xfc, 0x0e, 0xac,
	0xfd, 0x0a, 0x36, 0xe6, 0x2e, 0x1a, 0x87, 0x7a, 0xca, 0x65, 0xda, 0x01, 0xf9, 0xc3, 0x9f, 0x5a,
	0x49, 0x7a, 0xfd, 0x02, 0x4a, 0x8b, 0x50, 0x88, 0xac, 0xa7, 0xb2, 0xac, 0x87, 0x11, 0xb4, 0xeb,
	0xe5, 0xfb, 0x67, 0x06, 0xca, 0xcb, 0xeb, 0x38, 0xa6, 0x7c, 0x42, 0x66, 0x68, 0xf9, 0xba, 0x71,
	0xe5, 0xfb, 0x85, 0xac, 0x73, 0x27, 0x82, 0x5d, 0x54, 0xf8, 0x97, 0x0c, 0x14, 0xf8, 0xf7, 0x5e,
	0xed, 0x89, 0x54, 0xbc, 0x9f, 0xc8, 0xa6, 0x9e, 0xe5, 0xac, 0x55, 0xee, 0x5c, 0x5d, 0x39, 0xf5,
	0x8b, 0x02, 0xf1, 0x3b, 0xb3, 0x28, 0xea, 0xbb, 0x0c, 0x14, 0xf9, 0x45, 0xac, 0x3d, 0x5b, 0xa9,
	0xd9, 0x5e, 0x18, 0x47, 0x78, 0xc1, 0xce, 0xe2, 0x0a, 0xf6, 0xb1, 0x2c, 0x6f, 0x3b, 0x8c, 0x5a,
	0x14, 0xf6, 0x9f, 0x02, 0x94, 0x82, 0xaf, 0xfb, 0x58, 0x3b, 0x10, 0x5e, 0x5f, 0xc8, 0xd5, 0x5a,
	0xe4, 0x48, 0xef, 0x2e, 0x0e, 0xc5, 0x77, 0x17, 0x8f, 0x22, 0x00, 0xf2, 0x8b, 0x8b, 0x43, 0xf6,
	0x26, 0x21, 0xa7, 0x84, 0xac, 0xbe, 0x46, 0x60, 0x2f, 0x04, 0x36, 0x42, 0xbe, 0x23, 0x2f, 0x31,
	0xeb, 0x6f, 0x03, 0xb8, 0xed, 0x0d, 0xfb, 0x52, 0xbb, 0x84, 0xad, 0x7b, 0xde, 0x17, 0xa2, 0xe7,
	0xcd, 0x87, 0xcc, 0x6a, 0x41, 0x67, 0x84, 0xe1, 0x6d, 0x72, 0xaf, 0x5e, 0x50, 0x2a, 0x5e, 0x31,
	0xea, 0xb7, 0x30, 0x3d, 0xf2, 0xff, 0x67, 0xa4, 0x64, 0x7a, 0x94, 0xa4, 0x49, 0x9d, 0x44, 0x34,
	0xe9, 0x6d, 0x1e, 0xfa, 0xa3, 0x59, 0x6f, 0xf5, 0x20, 0x19, 0x4d, 0x7b, 0xdb, 0x07, 0x49, 0x65,
	0x19, 0x12, 0x3f, 0x4f, 0x47, 0xb2, 0x36, 0xfe, 0x95, 0x11, 0x8f, 0x79, 0xb6, 0xd8, 0x9b, 0x90,
	0xb5, 0x46, 0xa1, 0xdb, 0xf6, 0x4a, 0xe6, 0xc1, 0xc9, 0x28, 0x58, 0xf2, 0xa3, 0xfa, 0xb7, 0x50,
	0x38, 0x89, 0x74, 0x3b, 0x47, 0xb2, 0xba, 0x3d, 0x05, 0xeb, 0x9a, 0xc6, 0x8f, 0x87, 0xb0, 0x1d,
	0xf6, 0xff, 0x4f, 0x5a, 0x19, 0x0a, 0xfd, 0xce, 0xd7, 0x9d, 0xb3, 0xcb, 0x4e, 0xed, 0x47, 0x5a,
	0x05, 0x8a, 0x2f, 0xcf, 0x4e, 0x4f, 0xcf, 0x2e, 0x8f, 0xdb, 0xb5, 0x8c, 0x56, 0x05, 0xe8, 0x77,
	0x16, 0xed, 0x2c, 0x49, 0xfd, 0xfd, 0xe9, 0x59, 0xeb, 0xeb, 0xe3, 0x76, 0x2d, 0xa7, 0x69, 0x50,
	0xed, 0x9c, 0xf5, 0x06, 0x27, 0x9d, 0xde, 0x71, 0xf7, 0xf8, 0xbc, 0x77, 0xdc, 0xae, 0x6d, 0x0c,
	0xf3, 0xf4, 0x5f, 0x20, 0x9f, 0xfe, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x8c, 0xcb, 0x19, 0x1b,
	0x29, 0x00, 0x00,
}
